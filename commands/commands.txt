RightCtrl+Home - VBox menu
RightCtrl+H - Shut down Ubuntu
RightCtrl+R - Restart
RightCtrl+C - Exit fullscreen
RightCtrl+F - fullscreen

Ctrl+Win+Arrow - set window to full height, half-width

||----Terminal:----||
ctrl+alt+T - launch terminal session
sudo apt-get --purge remove [package] - remove package and all its global configs
	sudo apt-get autoremove
	OR sudo apt-get purge --auto-remove [package]
	+look at: "The following extra packages will be installed:"
	while running
	sudo apt-get install [package]
	AND uninstall them too

mkdir directory_name - create directory
mv file.ext file2.ext - rename file
OR mv file file2
mv file.ext /path/ - move file
rm -f file OR file.ext - force to delete file
gedit file - edit file in text editor

||----gcc, valgrind:----||
gcc -o OBJfile file.c - compile .c file
gcc -ggdb -o file file.c
./file - launch executable
gdb - launch gdb
	b 4 - set preakpoint on line 4
	r - run
	n - next
	q - quit gdb

valgrind --tool=memcheck --gen-suppressions=all --leak-check=full --leak-resolution=med --track-origins=yes /home/valerii/CLionProjects/labd2/cmake-build-debug/labd2



||----TeX:----||
latex sample2e.tex - compile to dvi
xdvi sample2e.dvi - show result
pdflatex sample2e.tex - compile to pdf
xpdf sample2e.pdf - show result
win+space - сменить раскладку клавиатуры

||----Search for packages/subpackages and install:----||
apt-cache search <subpackage-name>
sudo apt-get install <package>
dpkg -L <package> - search in computer's directories


ls 
	-a - lists all
	-l - lists names in long format
		{rights} {number of hard links, including current and parent dir} 
		{owner's username} {owner's group} {date modified} {name}
	-t - lists in order last modified
	-alt - all at once
pwd - path to working directory
cp [source] [target] - copy file
cp [source1] [source2] ... [path/to/dir] - copy to specified directory leaving the same filenames
	>example: cp brail*.txt ../braille2018
mv - move
rm
	-r - recursive (remove directory and all child files/dirs)

The workflow for Git collaborations typically follows this order:

    Fetch and merge changes from the remote
    Create a branch to work on a new project feature
    Develop the feature on your branch and commit your work
    Fetch and merge from the remote again (in case new commits were made while you were working)
    Push your branch up to the remote for review

Steps 1 and 4 are a safeguard against merge conflicts, which occur when two branches contain file changes that cannot be merged with the git merge command. Step 5 involves git push, a command you will learn in the next exercise.

echo "# github-move" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/zuevval/braille.git
git push -u origin master 
